class Solution {
    public void merge(int nums[],int l,int mid,int r){
        ArrayList<Integer> ar = new ArrayList<>();
        int left = l;
        int right = mid+1;
        while(left<=mid && right<=r){
            if(nums[left] <= nums[right]){
                ar.add(nums[left]);
                left++;
            }else{
                ar.add(nums[right]);
                right++;
            }
        }
        while(left<=mid){
            ar.add(nums[left]);
            left++;
        }
        while(right<=r){
            ar.add(nums[right]);
            right++;
        }
        for(int i=l;i<=r;i++){
            nums[i] = ar.get(i-l);
        }
    }
    public int countreversepairs(int nums[],int l,int mid,int r){
        int right = mid+1;
        int cnt = 0;
        for(int i=l;i<=mid;i++){
            while(right<=r && nums[i]>2*nums[right]){
                right++;
            }
            cnt = cnt + (right-(mid+1));
        }
        return cnt;
    }
    public int mergesort(int nums[],int l,int r){
        int cnt = 0;
        if(l>=r) return cnt;
        int mid = l+(r-l)/2;
        cnt+=mergesort(nums,l,mid);
        cnt+=mergesort(nums,mid+1,r);
        cnt+=countreversepairs(nums,l,mid,r);
        merge(nums,l,mid,r);
        return cnt;
    }
    public int reversePairs(int[] nums) {
        return mergesort(nums,0,nums.length-1);
    }
}