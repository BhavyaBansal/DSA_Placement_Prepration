

//User function Template for Java
class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long mergesort(long arr[],int l,int r)
    {
        long inv = 0;
        if(l<r)
        {
           int mid = l+(r-l)/2;   
           inv+=mergesort(arr,l,mid);
           inv+=mergesort(arr,mid+1,r);
           inv+=merge(arr,l,mid,r);
        }
        return inv;
    }
    static long merge(long arr[],int l,int mid,int r)
    {
        long inv = 0;
        int n1 = mid-l+1;
        int n2 = r-mid;
        long a[] = new long[n1];
        long b[] = new long[n2];
        for(int i=0;i<n1;i++)
        {
            a[i] = arr[l+i];
        }
        for(int i=0;i<n2;i++)
        {
            b[i] = arr[mid+i+1];
        }
        int i=0,j=0,k=l;
        while(i<n1 && j<n2)
        {
            if(a[i] <= b[j])
            {
                arr[k] = a[i];
                i++;k++;
            }
            else
            {
                arr[k] = b[j];
                inv += n1-i;
                j++;
                k++;
            }
        }
        while(i<n1)
        {
            arr[k] = a[i];
            i++;k++;
        }
        while(j<n2)
        {
            arr[k] = b[j];
            j++;k++;
        }
        return inv;
    }
    static long inversionCount(long arr[], long N)
    {
        long inv = mergesort(arr,0,(int)N-1);
        return inv;
    }
}