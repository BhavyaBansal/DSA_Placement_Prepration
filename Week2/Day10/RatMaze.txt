class Solution {
    public static void findPaths(int i,int j,ArrayList<String> ans,int vis[][],int matrix[][],int n,String str){
        if(i == n-1 && j == n-1){
            ans.add(str);
            return;
        }
        if(i+1<n && vis[i+1][j] == 0 && matrix[i+1][j] == 1){
            vis[i][j] = 1;
            findPaths(i+1,j,ans,vis,matrix,n,str+'D');
            vis[i][j] = 0;
        }
        if(j-1>=0 && vis[i][j-1] == 0 && matrix[i][j-1] == 1){
            vis[i][j] = 1;
            findPaths(i,j-1,ans,vis,matrix,n,str+'L');
            vis[i][j] = 0;
        }
        if(j+1<n && vis[i][j+1] == 0 && matrix[i][j+1] == 1){
            vis[i][j] = 1;
            findPaths(i,j+1,ans,vis,matrix,n,str+'R');
            vis[i][j] = 0;
        }
        if(i-1>=0 && vis[i-1][j] == 0 && matrix[i-1][j] == 1){
            vis[i][j] = 1;
            findPaths(i-1,j,ans,vis,matrix,n,str+'U');
            vis[i][j] = 0;
        }
    }
    public static ArrayList<String> findPath(int[][] m, int n) {
       int vis[][] = new int[n][n];
       ArrayList<String> ans = new ArrayList<String>();
       if(m[0][0]!=0) findPaths(0,0,ans,vis,m,n,"");
       return ans;
    }
}