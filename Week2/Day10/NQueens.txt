class Solution {
    public void solve(int col,char board[][],int leftrow[],int lowerdiagonal[],int upperdiagonal[],List<List<String>> ans){
        if(col == board.length){
            List<String> li = new ArrayList<>(); 
            for(int i=0;i<board.length;i++){
                String str = new String(board[i]);
                li.add(str);
            }
            ans.add(li);
        }
        for(int row=0;row<board.length;row++){
            if(leftrow[row] == 0  && lowerdiagonal[col+row] == 0 && upperdiagonal[(board.length-1)+(col-row)] == 0){
                board[row][col] = 'Q';
                leftrow[row] = 1;
                lowerdiagonal[col+row] = 1;
                upperdiagonal[(board.length-1)+(col-row)] = 1;
                solve(col+1,board,leftrow,lowerdiagonal,upperdiagonal,ans);
                board[row][col] = '.';
                leftrow[row] = 0;
                lowerdiagonal[col+row] = 0;
                upperdiagonal[(board.length-1)+(col-row)] = 0;
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        char board[][] = new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j] = '.';
            }
        }
        List<List<String>> ans = new ArrayList<List<String>>();
        int leftrow[] = new int[n];
        int lowerdiagonal[] = new int[(2*n)-1];
        int upperdiagonal[] = new int[(2*n)-1];
        solve(0,board,leftrow,lowerdiagonal,upperdiagonal,ans);
        return ans;
    }
}