class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        if(m<n){
            return findMedianSortedArrays(nums2,nums1);
        }
        int l = 0;
        int r = n;
        while(l<=r){
            int cut1 = (l+r)/2;
            int cut2 = (m+n+1)/2 - cut1;
            int left1 = cut1 == 0?Integer.MIN_VALUE:nums1[cut1-1];
            int left2 = cut2 == 0?Integer.MIN_VALUE:nums2[cut2-1];
            int right1 = cut1 == n?Integer.MAX_VALUE:nums1[cut1];
            int right2 = cut2 == m?Integer.MAX_VALUE:nums2[cut2];
            
            if(left1 <= right2 && left2 <= right1){
                if((n+m) % 2 == 0){
                    double ans = (Math.max(left1,left2)+Math.min(right1,right2))/2.0;
                    return ans;
                }else{
                    double ans = Math.max(left1,left2);
                    return ans;
                }
            }else if(left1 > right2){
                r = cut1-1;
            }else{
                l = cut1+1;
            }
        }
        return 0.0;
    }
}